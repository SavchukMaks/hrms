const CONSTANT_COUNTER_VALUE=2;var jsonConfig;candidateManager={resumeCounter:2,testTaskCounter:2,oldFileName:oldFileName="",newDiv:function(e,t,a,n){var i=document.createDocumentFragment(),o=document.createElement("div");o.setAttribute("class","wrapper-upload "+e);var d=document.createElement("input");d.setAttribute("type","file"),d.setAttribute("class","inputfile getFile"),d.setAttribute("id",t),d.setAttribute("data-role","edit"),"resume"==e?d.setAttribute("name","fileCandidateResume[]"):d.setAttribute("name","fileCandidateTestTask[]"),$(d).on("click",function(){candidateManager.getFileName(this)}),$(d).on("change",function(){candidateManager.setFileName(this)});var s=document.createElement("label");s.setAttribute("for",t),$(s).html('<img src="/img/icons/up-arrow.png" class="addImage"><span class="imageTitle">'+a+"</span>");var c=document.createElement("i");c.setAttribute("class","fa fa-close cleanCurrentBlock"),c.setAttribute("data-role","edit"),$(c).on("click",function(){candidateManager.cleanInput(this)}),i.appendChild(d),i.appendChild(s),i.appendChild(c),o.appendChild(i);var l=$(n);$(o).insertBefore(l)},cleanInput:function(e){var t=$(e).closest(".wrapper-upload"),a=t[0].className,n=document.getElementsByClassName(a),i=n.length,o=$(e).attr("data-role");if("edit"==o)var d=t.find("input")[0],s=$(d).siblings().children("span.imageTitle").text();i>1?(t.remove(),"edit"==o&&candidateManager.deleteFile(s)):(t.find("input")[0].value="",t.hasClass("resume")?t.find("span").html("File of Resume"):t.find("span").html("File of Test Task"),"edit"==o&&candidateManager.deleteFile(s))},getFileName:function(e){var t=e.value;if(""==t)var a=$(e).siblings().children("span.imageTitle").text();else var a=t.split("\\").pop();candidateManager.oldFileName=a},setFileName:function(e){var t=e.value;if(""!=t){var a=$(e).siblings().children("span.imageTitle"),n=t.split("\\").pop();n.length>0?a[0].innerHTML=n:a[0].innerHTML=candidateManager.oldFileName;"edit"==$(e).attr("data-role")&&candidateManager.editFile(e,n)}},validateEmail:function(){return!!/^[\w\-\.\+]+\@[a-zA-Z0-9\.\-]+\.[a-zA-z0-9]{2,4}$/.test($("#email").val())},changeVisibleInLink:function(e,t,a){var n=e,i=e.val(),o=t;n.is(":visible")?""===i?console.log("Empty"):(n.hide(),o.text(i),o.show(),a.text("Change"),a.addClass("change")):(a.text("Add"),a.removeClass("change"),n.show(),o.hide())},uploadPhotoCandidate:function(e,t,a){var n=$(e).siblings(".add-photo-candidate").children("img#photo"),i=e.files[0],o=new FormData;o.append("tempFile",i),o.append("id",a),$.ajax({type:"POST",headers:{"X-CSRF-TOKEN":$('meta[name="csrf-token"]').attr("content")},processData:!1,contentType:!1,url:t,data:o,success:function(e){n.attr("src",e)}})},getLocation:function(e,t){$(e).autocomplete({source:t})},doSearchCandidate:function(e,t){$(e).autocomplete({source:t})},deletePhoto:function(e,t){var a=$(".add-photo-candidate img").attr("src");if(void 0!==a){var n=a.split("/"),i=n[n.length-1];$.get(t,{fileName:i,id:e})}},updateLink:function(e,t){var a="",n="";a=$(e).attr("id"),"changeLinkLinkedin"==a&&(n="linkedin"),"changeLinkFacebook"==a&&(n="facebook"),"changeEmail"==a&&(n="email");var i=document.getElementsByName(n)[0].value;if(candidateManager.isEmpty(i))return void alert("Field is empty!");$.ajax({method:"PUT",headers:{"X-CSRF-TOKEN":$('meta[name="csrf-token"]').attr("content")},url:t,data:{id:jsonConfig.id,input:n,val:i}})},isEmpty:function(e){return!e||0==e.length},editFile:function(e,t){var a=$(e).attr("id").split("_")[0],n=e.files[0],i=new FormData;i.append("tempFile",n),i.append("id",jsonConfig.id),i.append("oldFileName",candidateManager.oldFileName),i.append("fileName",t),i.append("inputId",a),$.ajax({type:"POST",headers:{"X-CSRF-TOKEN":$('meta[name="csrf-token"]').attr("content")},processData:!1,contentType:!1,url:jsonConfig.candidateEditFile,data:i,success:function(e){console.log("File is added.")}})},deleteFile:function(e){$.ajax({method:"DELETE",headers:{"X-CSRF-TOKEN":$('meta[name="csrf-token"]').attr("content")},url:jsonConfig.candidateDeleteFile,data:{id:jsonConfig.id,fileName:e},success:function(e){console.log("File is deleted.")}})},deleteFromVacancy:function(e){e.preventDefault(),e.stopPropagation();var t=$(e.target).siblings(".sure-delete"),a=t.find("p");t.css("display","block");var n=$(e.target).attr("data-id"),i=$("#vacancyId").attr("data-id");a.first().click(function(){var e=$(this).closest(".candidate-list-item");$.ajax({type:"POST",url:"/vacancy/candidate/delete",headers:{"X-CSRF-TOKEN":$('meta[name="csrf-token"]').attr("content")},data:{candidate:n,vacancyId:i},success:function(t){e.remove()}})}),a.last().click(function(){$(".sure-delete").css("display","none")})},deletefrom:function(e){candidateManager.deleteFromVacancy(e)},init:function(e){jsonConfig=e,$(".delete-btn").on("click",this.deletefrom),$("a#fileResume").on("click",this.fileResume),$("a#fileTestTask").on("click",this.fileTestTask),$("i.cleanCurrentBlock").on("click",this.cleanCurrentBlock),$("input.getFile").on("change",this.setFile),$("input.getFile").on("click",this.getFile),$(".social-link_email button").on("click",this.socialLinkEmail),$(".social-link button").on("click",this.socialLink),$("input#photoCandidate").on("change",this.photoCandidate),$("#location").on("input",this.location),$("#searchItem").on("input",this.searchCandidate),$("input#updatePhotoCandidate").on("change",this.updatePhotoCandidate),$("#changeLinkLinkedin, #changeLinkFacebook, #changeEmail").on("click",this.editLink),$(function(){$("#sortCandidate").select2({tags:!0,placeholder:"Types candidate"})}),$("#candidate-name, #required_position, #education, #experience, #description").editable({ajaxOptions:{method:"PUT",headers:{"X-CSRF-TOKEN":$('meta[name="csrf-token"]').attr("content")}},url:jsonConfig.VacancyUpdate}),$("#candidate-location").editable({ajaxOptions:{method:"PUT",headers:{"X-CSRF-TOKEN":$('meta[name="csrf-token"]').attr("content")}},type:"select2",onblur:"submit",emptytext:"None",select2:{placeholder:"Select a Requester",allowClear:!0,width:"165px",minimumInputLength:3,id:function(e){return e},ajax:{url:jsonConfig.citySearchAutocomplete,dataType:"json",data:function(e,t){return{term:e}},results:function(e,t){return{results:e}}},formatResult:function(e){return e},formatSelection:function(e){return e},initSelection:function(e,t){return $.get(jsonConfig.citySearchAutocomplete,{query:e.val()},function(e){t(e)},"json")}}}),$("#skills").on("beforeItemAdd",function(e){var t=e.item;e.options&&e.options.preventPost||$.ajax({method:"PUT",headers:{"X-CSRF-TOKEN":$('meta[name="csrf-token"]').attr("content")},url:jsonConfig.candidateUpdateSkills,data:{id:jsonConfig.id,skill:t},success:function(e){candidateManager.isEmpty(e)&&$("#skills").tagsinput("remove",t,{preventPost:!0})}})}),$("#skills").on("beforeItemRemove",function(e){var t=e.item;$.ajax({method:"DELETE",headers:{"X-CSRF-TOKEN":$('meta[name="csrf-token"]').attr("content")},url:jsonConfig.candidateDeleteSkills,data:{id:jsonConfig.id,skill:t},success:function(e){candidateManager.isEmpty(e)||$("#skills").tagsinput("add",t,{preventPost:!0})}})})},fileResume:function(e){candidateManager.oldFileName="",candidateManager.newDiv("resume","inputResume_"+candidateManager.resumeCounter,"File of Resume",e.target),candidateManager.resumeCounter++},fileTestTask:function(e){candidateManager.oldFileName="",candidateManager.newDiv("testTask","inputTest_"+candidateManager.testTaskCounter,"File of Test Task",e.target),candidateManager.testTaskCounter++},cleanCurrentBlock:function(e){candidateManager.cleanInput(e.target)},getFile:function(e){candidateManager.getFileName(e.target)},setFile:function(e){candidateManager.setFileName(e.target)},socialLinkEmail:function(){if(!candidateManager.validateEmail($("#email").val()))return alert("Invalid email!"),!0;candidateManager.changeVisibleInLink($(this).siblings("input"),$(this).siblings("p"),$(this))},socialLink:function(){candidateManager.changeVisibleInLink($(this).siblings("input"),$(this).siblings("p"),$(this))},photoCandidate:function(){candidateManager.uploadPhotoCandidate(this,jsonConfig.uploadPhotoUrl)},location:function(){candidateManager.getLocation(this,jsonConfig.citySearchAutocomplete)},searchCandidate:function(){candidateManager.doSearchCandidate(this,jsonConfig.candidateSearchAutocomplete)},updatePhotoCandidate:function(){candidateManager.deletePhoto(jsonConfig.id,jsonConfig.deletePhotoUrl),candidateManager.uploadPhotoCandidate(this,jsonConfig.updatePhotoUrl,jsonConfig.id)},editLink:function(){candidateManager.updateLink(this,jsonConfig.editeLink)}},$(document).ready(function(){$('[name="searchTags"]').on("submit",function(e){e.preventDefault();var t=$('input[name="search-tags"]').val(),a=$('input[name="search-tags"]').attr("data-sort");$.ajax({url:"/candidate/list/"+t,type:"get",data:a,success:function(e){var n="/candidate/list/"+t+"?"+a;history.pushState(null,null,n),window.location="",$("body").html(e)},error:function(){}})}),$('[name="searchCountry"]').on("submit",function(e){e.preventDefault();var t=$('input[name="search-country"]').val(),a=$('input[name="search-country"]').attr("data-sort");$.ajax({url:"/candidate/list/"+t,type:"get",data:a,success:function(e){var n="/candidate/list/"+t+"?"+a;history.pushState(null,null,n),window.location="",$("body").html(e)},error:function(){}})}),$('[name="searchAge"]').on("submit",function(e){e.preventDefault();var t=$('input[name="search-age"]').val(),a=$('input[name="search-age"]').attr("data-sort");$.ajax({url:"/candidate/list/"+t,type:"get",data:a,success:function(e){var n="/candidate/list/"+t+"?"+a;history.pushState(null,null,n),window.location="",$("body").html(e)},error:function(){}})}),$(".sort-experience select").on("change",function(e){e.preventDefault();var t=$("option:selected",this).attr("data-sort"),a=$("option:selected",this).attr("value");$.ajax({url:"/candidate/list/"+a,type:"get",data:t,success:function(e){var n="/candidate/list/"+a+"?"+t;history.pushState(null,null,n),window.location="",$("body").html(e)},error:function(){}})})});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
